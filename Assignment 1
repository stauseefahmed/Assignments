
Import the numpy package under the name np
In [import numpy as np]:

Create a null vector of size 10
In [x = np.zeros(10)]:

Create a vector with values ranging from 10 to 49
In [np.arange(10,49)]:

Find the shape of previous array in question 3
In [print(arr1.shape)]:

Print the type of the previous array in question 3
In [print(type(arr1))]:

Print the numpy version and the configuration
In [print(np._version_)
print(np.show_config())]:

Print the dimension of the array in question 3
In [print(arr1.shape)]:

Create a boolean array with all the True values
In [arr1 = np.ones((2), dtype=bool)]:

Create a two dimensional array
In [x = np.array([[1, 2, 3], [4, 5, 6]]]:

Create a three dimensional array
In [np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])]:

Reverse a vector (first element becomes last)
In [reversed_arr = arr[::-1]]:

Create a null vector of size 10 but the fifth value which is 1
In [x = np.zeros(10)
print(x)
print("Update fifth value to 1")
x[4] = 1
print(x)]:

Create a 3x3 identity matrix
In [array_2D=np.identity(3)
print('3x3 matrix:')
print(array_2D)]:

arr = np.array([1, 2, 3, 4, 5])
Convert the data type of the given array from int to float
In [arr = arr.astype('float64')]:

arr1 = np.array([[1., 2., 3.],

            [4., 5., 6.]])  

arr2 = np.array([[0., 4., 1.],

           [7., 2., 12.]])
Multiply arr1 with arr2
In [np.multiply(arr1, arr2)]:

arr1 = np.array([[1., 2., 3.],

            [4., 5., 6.]]) 

arr2 = np.array([[0., 4., 1.],

            [7., 2., 12.]])
Make an array by comparing both the arrays provided above
In [arr = np.concatenate((arr1, arr2))]:

Extract all odd numbers from arr with values(0-9)
In [a = np.array([1,2,3,4,5,6,6,7,7,8,9])
a[a % 2 == 1]]:

Replace all odd numbers to -1 from previous array
In [a[np.where(a%2 == 1)] =-1]:

arr = np.arange(10)
Replace the values of indexes 5,6,7 and 8 to 12
In [a[5:9] = 12]:

Create a 2d array with 1 on the border and 0 inside
In [x = np.ones((5,5))
x[1:-1,1:-1] = 0
print(x)]:

arr2d = np.array([[1, 2, 3],

            [4, 5, 6], 

            [7, 8, 9]])
Replace the value 5 to 12
In [arr2d[1,1] = 12]:

arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
Convert all the values of 1st array to 64
In [arr3d[0,0] = 64]:

Make a 2-Dimensional array with values 0-9 and slice out the first 1st 1-D array from it
In [x = np.array([[1, 2, 3], [4, 5, 6]])
print(x[0])]:

Make a 2-Dimensional array with values 0-9 and slice out the 2nd value from 2nd 1-D array from it
In [x = np.array([[1, 2, 3], [4, 5, 6]])
print(x[1,1])]:

Make a 2-Dimensional array with values 0-9 and slice out the third column but only the first two rows
In [arr = np.arange(9).reshape(3, 3)
arr3 = arr[0:-1, -1]

arr3]:

Create a 10x10 array with random values and find the minimum and maximum values
In [x = np.random.random((10,10))
print("Original Array:")
print(x) 
xmin, xmax = x.min(), x.max()
print("Minimum and Maximum Values:")
print(xmin, xmax)]:

27. a = np.array([1,2,3,2,3,4,3,4,5,6]) b = np.array([7,2,10,2,7,4,9,4,9,8])
Find the common items between a and b
In [np.intersect(a,b)]:

a = np.array([1,2,3,2,3,4,3,4,5,6]) b = np.array([7,2,10,2,7,4,9,4,9,8])
Find the positions where elements of a and b match
In [np.where(a== b)]:

names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) data = np.random.randn(7, 4)
Find all the values from array data where the values from array names are not equal to Will
In [import random

name = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])  
# data = np.random.randn(7,4) # --> This gives floating point numbers
data = np.random.randint(7, size=random.randrange(1, 10))
print(data)
print(np.where(name[data] != "Will"))]:

names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) data = np.random.randn(7, 4)
Find all the values from array data where the values from array names are not equal to Will and Joe
In [import random

name = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])  
# data = np.random.randn(7,4) # --> This gives floating point numbers
data = np.random.randint(7, size=random.randrange(1, 10))
print(data)
print(np.where((name[data] != "Joe") & (name[data] != "Will")))]:

Create a 2D array of shape 5x3 to contain decimal numbers between 1 and 15.
In [x = np.array([[2.2, 4.4, 6.6], [6.8, 8.1, 10.6],[2.2, 4.4, 6.6], [6.8, 8.1, 10.6],[1.1,5.8,8.6]], np.float64)]:

Create an array of shape (2, 2, 4) with decimal numbers between 1 to 16.
In [a_3d_array = np.array([[[1.2, 2.3, 3.4, 4.5], [3.2, 4.4, 5.5, 6.6]], [[5.5, 6.6, 7.7, 8.8], [7.7, 8.8, 9.9,10.1]]])]:

Swap axes of the array you created in Question 32
In [a_3d_array = np.array([[[1.2, 2.3, 3.4, 4.5], [3.2, 4.4, 5.5, 6.6]], [[5.5, 6.6, 7.7, 8.8], [7.7, 8.8, 9.9,10.1]]])
np.swapaxes(a_3d_array,0,1)]:

Create an array of size 10, and find the square root of every element in the array, if the values less than 0.5, replace them with 0
In [import  numpy as np
import math

x = np.array([1, 0.02, 3, 0.25,0.14,0.25,0.06,0.011,0.18,0.046,3,4])


print(x)
for item in range(10):
    temp = x[item]
    if math.sqrt(temp) < 0.5:
        x[item] = 0
print(x)]:

Create two random arrays of range 12 and make an array with the maximum values between each element of the two arrays
In [import  numpy as np


arr1 = np.random.rand(12)
arr2 = np.random.rand(12)
print(arr1, '\n' , arr2)

max1 = arr1.max()
min1 = arr1.min()
max2 = arr2.max()
min2 = arr2.min()
print("\n Max arr1:",max1,'\n',"Min arr1:",min1,'\n',"Max arr2:",max2,'\n',"Min arr2:",min2,'\n')
max_min_arr = np.array([max1,min1,max2,min2])
print(max_min_arr)]:

names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
Find the unique names and sort them out!
In [import  numpy as np

names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])

temp = np.unique(names)
print(np.sort(temp))]:

a = np.array([1,2,3,4,5]) b = np.array([5,6,7,8,9])
From array a remove all items present in array b
In [import numpy as np


a = np.array([1,2,3,4,5])
b = np.array([5,6,7,8,9])

temp = np.intersect1d(a,b)

m = list(np.where(a==temp))

np.delete(a,m,None)

print(a,b)]:

Following is the input NumPy array delete column two and insert following new column in its place.
sampleArray = numpy.array([[34,43,73],[82,22,12],[53,94,66]])

newColumn = numpy.array([[10,10,10]])
In [import numpy

print("Printing Original array")
sampleArray = numpy.array([[34,43,73],[82,22,12],[53,94,66]]) 
print (sampleArray)

print("Array after deleting column 2 on axis 1")
sampleArray = numpy.delete(sampleArray , 1, axis = 1) 
print (sampleArray)

arr = numpy.array([[10,10,10]])

print("Array after inserting column 2 on axis 1")
sampleArray = numpy.insert(sampleArray , 1, arr, axis = 1) 
print (sampleArray)]:

x = np.array([[1., 2., 3.], [4., 5., 6.]]) y = np.array([[6., 23.], [-1, 7], [8, 9]])
Find the dot product of the above two matrix
In [import numpy as np

x = np.array([[1., 2., 3.], [4., 5., 6.]])
y = np.array([[6., 23.], [-1, 7], [8, 9]])

ans = np.dot(x,y)

print(ans)]:

Generate a matrix of 20 random values and find its cumulative sum
In [import numpy as np


array_nums = np.arange(0, 40, 2)
print(array_nums)

print(array_nums.sum())]:
